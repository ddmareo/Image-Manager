[{"id":"6dcec554eb78452f","type":"tab","label":"UPLOAD IMAGE","disabled":false,"info":"","env":[]},{"id":"a475f03d06a8827f","type":"uibuilder","z":"6dcec554eb78452f","name":"","topic":"","url":"imageupload","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"copyIndex":true,"templateFolder":"blank","extTemplate":"","showfolder":false,"useSecurity":false,"sessionLength":432000,"tokenAutoExtend":false,"reload":false,"sourceFolder":"src","x":310,"y":240,"wires":[[],[]]},{"id":"4a2ccaaa28bfcefa","type":"inject","z":"6dcec554eb78452f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":300,"y":340,"wires":[["9649feae12380888"]]},{"id":"9649feae12380888","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"SELECT * FROM images;","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":490,"y":340,"wires":[["6234d7cc4096d892"]]},{"id":"6234d7cc4096d892","type":"debug","z":"6dcec554eb78452f","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":680,"y":340,"wires":[]},{"id":"a0e5345e8f35293d","type":"http in","z":"6dcec554eb78452f","name":"","url":"dataimage","method":"get","upload":false,"swaggerDoc":"","x":280,"y":500,"wires":[["40fd6f135f5cab79"]]},{"id":"40fd6f135f5cab79","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"SELECT * FROM images;","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":490,"y":500,"wires":[["7245c41d698f70d5"]]},{"id":"cd4501c1ef1d33dd","type":"inject","z":"6dcec554eb78452f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":300,"y":400,"wires":[["665426dabbbf9331"]]},{"id":"7245c41d698f70d5","type":"http response","z":"6dcec554eb78452f","name":"","statusCode":"","headers":{},"x":670,"y":500,"wires":[]},{"id":"665426dabbbf9331","type":"http request","z":"6dcec554eb78452f","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"http://localhost:1880/dataimage","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":510,"y":400,"wires":[["a44281f2f84cf1c6"]]},{"id":"a44281f2f84cf1c6","type":"debug","z":"6dcec554eb78452f","name":"debug 3","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":680,"y":400,"wires":[]},{"id":"a23a35b6a9d029be","type":"http in","z":"6dcec554eb78452f","name":"","url":"uploadimage","method":"post","upload":true,"swaggerDoc":"","x":270,"y":600,"wires":[["ebc19d05970c9aa4"]]},{"id":"e20c2d58bb44d430","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":710,"y":600,"wires":[["61ee2953fcb7f4e6"]]},{"id":"61ee2953fcb7f4e6","type":"http response","z":"6dcec554eb78452f","name":"","statusCode":"","headers":{},"x":870,"y":600,"wires":[]},{"id":"ebc19d05970c9aa4","type":"function","z":"6dcec554eb78452f","name":"Upload Image","func":"const fs = global.get('fs');\nconst path = global.get('path');\n\nconst uploadsDir = 'your_upload_destination_path'; \nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 MB\n\nif (!msg.req.files || msg.req.files.length === 0) {\n    msg.payload = \"No files uploaded\";\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nlet uploadedFiles = msg.req.files;\nlet fileNames = [];\nlet rejectedFiles = [];\n\nlet filePromises = uploadedFiles.map(uploadedFile => {\n    return new Promise((resolve, reject) => {\n        const fileName = uploadedFile.originalname;\n        const fileSize = uploadedFile.size;\n        const filePath = path.join(uploadsDir, fileName);\n\n        // File size validation\n        if (fileSize > MAX_FILE_SIZE) {\n            rejectedFiles.push(fileName);\n            console.log(`File ${fileName} is too large (over 5MB), skipping...`);\n            return resolve(null); \n        }\n\n        // Directory creation \n        if (!fs.existsSync(uploadsDir)) {\n            fs.mkdirSync(uploadsDir, { recursive: true });\n        }\n\n        // File saving\n        fs.writeFile(filePath, uploadedFile.buffer, (err) => {\n            if (err) {\n                console.error(\"Error saving file:\", err);\n                return reject(\"Error uploading file: \" + err.message); \n            }\n            fileNames.push(fileName);\n            resolve(fileName); \n        });\n    });\n});\n\nPromise.all(filePromises)\n    .then(() => {\n        // Database interaction (modify as needed)\n        const placeholders = fileNames.map((_, index) => `($${index + 1})`).join(', ');\n        msg.query = `INSERT INTO images(name) VALUES ${placeholders}`;\n        msg.params = fileNames;\n\n        // Response handling\n        if (rejectedFiles.length > 0) {\n            msg.payload = `Uploaded files: ${fileNames.join(\", \")}. Rejected files (too large): ${rejectedFiles.join(\", \")}`;\n        } else {\n            msg.payload = `Uploaded files: ${fileNames.join(\", \")}`;\n        }\n        msg.statusCode = 200; \n        node.send([msg, null]); \n    })\n    .catch(error => {\n        msg.payload = \"Error during upload: \" + error; \n        msg.statusCode = 500;\n        node.send([null, msg]); \n    });\n\nreturn null; ","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":600,"wires":[["e20c2d58bb44d430"]]},{"id":"24d8b16726733496","type":"http in","z":"6dcec554eb78452f","name":"","url":"deleteimage/:id","method":"delete","upload":false,"swaggerDoc":"","x":260,"y":700,"wires":[["7adc2174bb17e9f8"]]},{"id":"6431726a7713ae44","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":710,"y":700,"wires":[["8274378d07e231ef"]]},{"id":"18b8666257a716e9","type":"http response","z":"6dcec554eb78452f","name":"","statusCode":"","headers":{},"x":1270,"y":700,"wires":[]},{"id":"7adc2174bb17e9f8","type":"function","z":"6dcec554eb78452f","name":"function 4","func":"const id = msg.req.params.id;\nmsg.query = `DELETE FROM images WHERE id = '${id}' RETURNING name;`; // Optimized query\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":700,"wires":[["6431726a7713ae44"]]},{"id":"8274378d07e231ef","type":"function","z":"6dcec554eb78452f","name":"function 5","func":"const filename = msg.payload[0].name; \nmsg.filename = filename;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":700,"wires":[["cfdf6437dc9dcb29"]]},{"id":"cfdf6437dc9dcb29","type":"function","z":"6dcec554eb78452f","name":"function 6","func":"const fs = global.get('fs');\nconst imagePath = `your_upload_destination_path/${msg.filename}`;\n\nfs.unlink(imagePath, (err) => {\n    if (err) {\n        console.error('Error deleting image file:', err);\n        // Send an error response back to the client\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'Failed to delete image file.' };\n        node.send(msg); // Send the error response\n    } else {\n        console.log('Image file deleted successfully!');\n        // Proceed with the success response (the existing HTTP Response node will handle this)\n        node.send(msg);\n    }\n});","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1080,"y":700,"wires":[["18b8666257a716e9"]]},{"id":"http-image-in","type":"http in","z":"6dcec554eb78452f","name":"","url":"/image/:name","method":"get","upload":false,"swaggerDoc":"","x":270,"y":800,"wires":[["function-get-image-path"]]},{"id":"function-get-image-path","type":"function","z":"6dcec554eb78452f","name":"Get Image Path","func":"const name = msg.req.params.name;\nmsg.query = `SELECT name FROM images WHERE name = '${name}'`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":800,"wires":[["pg-query"]]},{"id":"pg-query","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":710,"y":800,"wires":[["function-serve-image"]]},{"id":"function-serve-image","type":"function","z":"6dcec554eb78452f","name":"Serve Image","func":"const fs = global.get('fs');\nconst path = global.get('path'); \nconst imageName = msg.payload[0].name;\nconst imagePath = `your_upload_destination_path/${imageName}`;\n\nconst fileExtension = path.extname(imageName).toLowerCase();\n\nlet contentType = 'image/jpeg'\nif (fileExtension === '.png') {\n    contentType = 'image/png';\n} else if (fileExtension === '.gif') {\n    contentType = 'image/gif';\n} \n\nfs.readFile(imagePath, (err, data) => {\n    if (err) {\n        msg.statusCode = 404;\n        msg.payload = 'Image not found';\n        return node.send(msg);\n    }\n\n    msg.headers = { 'Content-Type': contentType };\n    msg.payload = data;\n    node.send(msg);\n});\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":800,"wires":[["http-image-out"]]},{"id":"http-image-out","type":"http response","z":"6dcec554eb78452f","name":"","statusCode":"","headers":{},"x":1070,"y":800,"wires":[]},{"id":"5daa745d18a7fb96","type":"http in","z":"6dcec554eb78452f","name":"","url":"/deleteallimages","method":"delete","upload":false,"swaggerDoc":"","x":250,"y":900,"wires":[["c83ba6d9f2fd7b7b"]]},{"id":"a5532d387d58fcc3","type":"postgresql","z":"6dcec554eb78452f","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":710,"y":900,"wires":[["22edf7448c18736c"]]},{"id":"83baf20737464e62","type":"http response","z":"6dcec554eb78452f","name":"","statusCode":"","headers":{},"x":1270,"y":900,"wires":[]},{"id":"c83ba6d9f2fd7b7b","type":"function","z":"6dcec554eb78452f","name":"function 7","func":"const name = msg.req.params.name;\nmsg.query = `DELETE FROM images RETURNING name`;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":900,"wires":[["a5532d387d58fcc3"]]},{"id":"22edf7448c18736c","type":"function","z":"6dcec554eb78452f","name":"function 8","func":"const filename = msg.payload.map(item => item.name);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":900,"wires":[["de31274be0568655"]]},{"id":"de31274be0568655","type":"function","z":"6dcec554eb78452f","name":"function 9","func":"const fs = global.get('fs');\nconst filenames = msg.payload.map(item => item.name); // Assuming 'name' contains the filenames\n\n// Create an array of Promises, one for each file deletion\nconst deletePromises = filenames.map(filename => {\n    const imagePath = `your_upload_destination_path/${filename}`;\n\n    return new Promise((resolve, reject) => {\n        fs.unlink(imagePath, (err) => {\n            if (err) {\n                reject({ filename, error: err });\n            } else {\n                resolve({ filename, message: 'Deleted successfully' });\n            }\n        });\n    });\n});\n\n// Wait for all deletions to complete\nreturn Promise.allSettled(deletePromises)\n    .then(results => {\n        // Collect information about all the deletions\n        const deletedFiles = results.filter(result => result.status === 'fulfilled').map(result => result.value);\n        const failedFiles = results.filter(result => result.status === 'rejected').map(result => result.reason);\n\n        if (failedFiles.length > 0) {\n            // If there were errors, return a partial success with the list of failed files\n            msg.statusCode = 500;\n            msg.payload = { message: 'Some files could not be deleted', deletedFiles, failedFiles };\n        } else {\n            // All files were deleted successfully\n            msg.statusCode = 200;\n            msg.payload = { message: 'All images deleted successfully', deletedFiles };\n        }\n        return msg;\n    })\n    .catch(err => {\n        // Handle any unexpected errors\n        console.error('Unexpected error:', err);\n        msg.statusCode = 500;\n        msg.payload = { error: 'Unexpected error occurred during file deletion' };\n        return msg;\n    });\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1080,"y":900,"wires":[["83baf20737464e62"]]},{"id":"8ff09028acc3aecc","type":"postgreSQLConfig","name":"","host":"localhost","hostFieldType":"str","port":"5432","portFieldType":"num","database":"postgres","databaseFieldType":"str","ssl":"false","sslFieldType":"bool","applicationName":"","applicationNameType":"str","max":"10","maxFieldType":"num","idle":"1000","idleFieldType":"num","connectionTimeout":"10000","connectionTimeoutFieldType":"num","user":"postgres","userFieldType":"str","password":"12345","passwordFieldType":"str"}]